{
  "openapi": "3.0.3",
  "info": {
    "title": "Policy as Code Platform API",
    "description": "Comprehensive governance platform for managing decision logic as versioned, auditable software artifacts",
    "version": "1.0.0",
    "contact": {
      "name": "Policy as Code Platform",
      "url": "https://github.com/data-riot/policy-as-code"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://api.policy-as-code.gov",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    },
    {
      "mTLS": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Get system health status",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/registry/functions": {
      "get": {
        "summary": "List Decision Functions",
        "description": "Get list of all registered decision functions",
        "operationId": "listFunctions",
        "responses": {
          "200": {
            "description": "List of decision functions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DecisionFunction"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register Decision Function",
        "description": "Register a new decision function",
        "operationId": "registerFunction",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionFunctionSpec"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Decision function registered successfully"
          },
          "400": {
            "description": "Invalid decision function specification"
          }
        }
      }
    },
    "/registry/functions/{function_id}": {
      "get": {
        "summary": "Get Decision Function",
        "description": "Get a specific decision function by ID",
        "operationId": "getFunction",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision function details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionFunction"
                }
              }
            }
          },
          "404": {
            "description": "Decision function not found"
          }
        }
      },
      "put": {
        "summary": "Update Decision Function",
        "description": "Update an existing decision function",
        "operationId": "updateFunction",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionFunctionSpec"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decision function updated successfully"
          },
          "404": {
            "description": "Decision function not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Decision Function",
        "description": "Delete a decision function",
        "operationId": "deleteFunction",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Decision function deleted successfully"
          },
          "404": {
            "description": "Decision function not found"
          }
        }
      }
    },
    "/decisions/{function_id}": {
      "post": {
        "summary": "Execute Decision",
        "description": "Execute a decision function with input data",
        "operationId": "executeDecision",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decision executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Decision function not found"
          }
        }
      }
    },
    "/audit/reports": {
      "get": {
        "summary": "Get Audit Reports",
        "description": "Get audit reports for decision functions",
        "operationId": "getAuditReports",
        "parameters": [
          {
            "name": "function_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/legal/validate": {
      "post": {
        "summary": "Validate Legal Reference",
        "description": "Validate a legal reference (ELI, Finlex, EUR-Lex)",
        "operationId": "validateLegalReference",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reference": {
                    "type": "string",
                    "description": "Legal reference URL or identifier"
                  },
                  "reference_type": {
                    "type": "string",
                    "enum": [
                      "ELI",
                      "Finlex",
                      "EUR-Lex"
                    ],
                    "description": "Type of legal reference"
                  }
                },
                "required": [
                  "reference",
                  "reference_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Legal reference validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalValidationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid legal reference format"
          }
        }
      }
    },
    "/functions/register": {
      "post": {
        "summary": "Register Decision Function",
        "description": "Register a new decision function",
        "operationId": "registerFunction",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Function registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/functions/{function_id}/execute": {
      "post": {
        "summary": "Execute Decision Function",
        "description": "Execute a decision function with input data",
        "operationId": "executeFunction",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "latest"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Function not signed or unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/functions/{function_id}/history": {
      "get": {
        "summary": "Get Decision History",
        "description": "Get execution history for a function",
        "operationId": "getDecisionHistory",
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/explain/{trace_id}": {
      "get": {
        "summary": "Explain Decision",
        "description": "Get human-readable explanation of a decision",
        "operationId": "explainDecision",
        "parameters": [
          {
            "name": "trace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Explanation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplanationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Trace not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/audit/report/latest": {
      "get": {
        "summary": "Get Latest Audit Report",
        "description": "Get the latest audit report with integrity statistics",
        "operationId": "getLatestAuditReport",
        "responses": {
          "200": {
            "description": "Audit report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditReport"
                }
              }
            }
          }
        }
      }
    },
    "/trace/integrity": {
      "get": {
        "summary": "Verify Trace Integrity",
        "description": "Verify the integrity of the trace ledger",
        "operationId": "verifyTraceIntegrity",
        "responses": {
          "200": {
            "description": "Integrity verification completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrityReport"
                }
              }
            }
          }
        }
      }
    },
    "/performance/summary": {
      "get": {
        "summary": "Get Performance Summary",
        "description": "Get system performance metrics and statistics",
        "operationId": "getPerformanceSummary",
        "responses": {
          "200": {
            "description": "Performance summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceSummary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "mTLS": {
        "type": "mutualTLS"
      }
    },
    "schemas": {
      "HealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "degraded",
              "unhealthy"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          },
          "components": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "enum": [
                  "healthy",
                  "degraded",
                  "unhealthy"
                ]
              },
              "ledger": {
                "type": "string",
                "enum": [
                  "healthy",
                  "degraded",
                  "unhealthy"
                ]
              },
              "monitoring": {
                "type": "string",
                "enum": [
                  "healthy",
                  "degraded",
                  "unhealthy"
                ]
              }
            }
          }
        },
        "required": [
          "status",
          "timestamp",
          "version"
        ]
      },
      "FunctionRegistrationRequest": {
        "type": "object",
        "properties": {
          "function_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$"
          },
          "function_code": {
            "type": "string"
          },
          "legal_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalReference"
            },
            "minItems": 1
          },
          "input_schema": {
            "type": "object"
          },
          "output_schema": {
            "type": "object"
          },
          "explain": {
            "type": "object",
            "properties": {
              "allow_fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "redaction_policy": {
                "type": "string",
                "enum": [
                  "strict",
                  "moderate",
                  "permissive"
                ]
              }
            },
            "required": [
              "allow_fields",
              "redaction_policy"
            ]
          }
        },
        "required": [
          "function_id",
          "version",
          "function_code",
          "legal_references",
          "input_schema",
          "output_schema",
          "explain"
        ]
      },
      "FunctionRegistrationResponse": {
        "type": "object",
        "properties": {
          "function_id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "registered",
              "pending_signature",
              "active"
            ]
          },
          "trace_id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "function_id",
          "version",
          "status",
          "trace_id"
        ]
      },
      "ExecutionRequest": {
        "type": "object",
        "properties": {
          "input_data": {
            "type": "object"
          },
          "nonce": {
            "type": "string",
            "description": "Unique nonce for replay protection"
          },
          "ttl_seconds": {
            "type": "integer",
            "minimum": 1,
            "maximum": 3600,
            "description": "Time-to-live for replay protection"
          },
          "caller_id": {
            "type": "string",
            "description": "Identifier of the calling system"
          }
        },
        "required": [
          "input_data",
          "nonce",
          "ttl_seconds",
          "caller_id"
        ]
      },
      "ExecutionResponse": {
        "type": "object",
        "properties": {
          "trace_id": {
            "type": "string"
          },
          "function_id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "result": {
            "type": "object"
          },
          "execution_time_ms": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "success": {
            "type": "boolean"
          },
          "legal_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalReference"
            }
          }
        },
        "required": [
          "trace_id",
          "function_id",
          "version",
          "result",
          "execution_time_ms",
          "timestamp",
          "success"
        ]
      },
      "HistoryResponse": {
        "type": "object",
        "properties": {
          "function_id": {
            "type": "string"
          },
          "decisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecisionRecord"
            }
          },
          "total_count": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          }
        },
        "required": [
          "function_id",
          "decisions",
          "total_count",
          "limit",
          "offset"
        ]
      },
      "ExplanationResponse": {
        "type": "object",
        "properties": {
          "trace_id": {
            "type": "string"
          },
          "function_id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "explanation": {
            "type": "string",
            "description": "Human-readable explanation"
          },
          "reasoning_steps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "applied_rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "legal_basis": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "trace_id",
          "function_id",
          "version",
          "explanation",
          "timestamp"
        ]
      },
      "AuditReport": {
        "type": "object",
        "properties": {
          "report_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "integrity_status": {
            "type": "string",
            "enum": [
              "verified",
              "failed",
              "partial"
            ]
          },
          "chain_breaks": {
            "type": "integer",
            "minimum": 0
          },
          "unsigned_attempts": {
            "type": "integer",
            "minimum": 0
          },
          "drift_detected": {
            "type": "integer",
            "minimum": 0
          },
          "total_entries": {
            "type": "integer",
            "minimum": 0
          },
          "verified_entries": {
            "type": "integer",
            "minimum": 0
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "report_id",
          "timestamp",
          "integrity_status",
          "chain_breaks",
          "unsigned_attempts",
          "drift_detected",
          "total_entries",
          "verified_entries"
        ]
      },
      "IntegrityReport": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean"
          },
          "total_entries": {
            "type": "integer"
          },
          "verified_entries": {
            "type": "integer"
          },
          "chain_breaks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entry_id": {
                  "type": "string"
                },
                "expected_hash": {
                  "type": "string"
                },
                "actual_hash": {
                  "type": "string"
                }
              }
            }
          },
          "verification_time_ms": {
            "type": "integer"
          }
        },
        "required": [
          "is_valid",
          "total_entries",
          "verified_entries"
        ]
      },
      "PerformanceSummary": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "total_decisions": {
            "type": "integer"
          },
          "average_execution_time_ms": {
            "type": "number"
          },
          "p95_execution_time_ms": {
            "type": "number"
          },
          "p99_execution_time_ms": {
            "type": "number"
          },
          "error_rate": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "active_functions": {
            "type": "integer"
          },
          "system_metrics": {
            "type": "object",
            "properties": {
              "cpu_usage_percent": {
                "type": "number"
              },
              "memory_usage_percent": {
                "type": "number"
              },
              "disk_usage_percent": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "timestamp",
          "total_decisions",
          "average_execution_time_ms",
          "error_rate",
          "active_functions"
        ]
      },
      "DecisionRecord": {
        "type": "object",
        "properties": {
          "trace_id": {
            "type": "string"
          },
          "function_id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "execution_time_ms": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "success": {
            "type": "boolean"
          },
          "input_hash": {
            "type": "string"
          },
          "result_hash": {
            "type": "string"
          }
        },
        "required": [
          "trace_id",
          "function_id",
          "version",
          "execution_time_ms",
          "timestamp",
          "success"
        ]
      },
      "LegalReference": {
        "type": "object",
        "properties": {
          "system": {
            "type": "string",
            "enum": [
              "finlex",
              "eur-lex",
              "custom"
            ]
          },
          "act_id": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "system",
          "act_id",
          "section",
          "title",
          "uri"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "error",
          "message",
          "timestamp"
        ]
      }
    }
  }
}

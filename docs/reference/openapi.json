{
  "openapi": "3.0.3",
  "info": {
    "title": "Policy as Code API",
    "description": "Production-grade REST API for Policy as Code platform with governance features: immutable trace ledger, legal compliance, digital signatures, and audit capabilities",
    "version": "1.0.0",
    "contact": {
      "name": "Policy as Code Team",
      "email": "",
      "url": ""
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.localhost/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.localhost/v1",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "JWT": []
    },
    {
      "mTLS": []
    }
  ],
  "paths": {
    "/execute": {
      "post": {
        "summary": "Execute Decision Function",
        "description": "Execute a decision function with input validation, legal compliance checking, and immutable trace recording",
        "operationId": "executeDecisionFunction",
        "tags": [
          "Execution"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "mTLS": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionRequest"
              },
              "examples": {
                "loan_eligibility": {
                  "summary": "Loan Eligibility Check",
                  "value": {
                    "function_id": "loan_eligibility",
                    "version": "1.0.0",
                    "input_data": {
                      "applicant_id": "12345",
                      "loan_amount": 50000,
                      "credit_score": 750,
                      "income": 80000
                    },
                    "nonce": "req_1234567890",
                    "request_id": "req_abc123",
                    "correlation_id": "corr_xyz789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decision executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions or unsigned function",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/explain/{trace_id}": {
      "get": {
        "summary": "Get Decision Explanation",
        "description": "Retrieve human-readable explanation of a decision with legal basis and redacted sensitive information",
        "operationId": "getDecisionExplanation",
        "tags": [
          "Explanation"
        ],
        "parameters": [
          {
            "name": "trace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Trace ID of the decision to explain"
          },
          {
            "name": "redact_sensitive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to redact sensitive information"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "en",
                "fi",
                "sv"
              ],
              "default": "en"
            },
            "description": "Language for explanation"
          }
        ],
        "responses": {
          "200": {
            "description": "Explanation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplanationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Trace not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/audit/report/latest": {
      "get": {
        "summary": "Get Latest Audit Report",
        "description": "Retrieve the latest audit report with integrity verification results, drift detection, and compliance metrics",
        "operationId": "getLatestAuditReport",
        "tags": [
          "Audit"
        ],
        "responses": {
          "200": {
            "description": "Audit report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditReport"
                }
              }
            }
          }
        }
      }
    },
    "/audit/run": {
      "post": {
        "summary": "Trigger Audit",
        "description": "Manually trigger an audit run for integrity verification and drift detection",
        "operationId": "triggerAudit",
        "tags": [
          "Audit"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "audit_type": {
                    "type": "string",
                    "enum": [
                      "full",
                      "incremental",
                      "drift_only"
                    ],
                    "default": "incremental"
                  },
                  "function_id": {
                    "type": "string",
                    "description": "Specific function to audit (optional)"
                  },
                  "date_range": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "end": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Audit triggered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "audit_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "estimated_completion": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registry/{function_id}/releases": {
      "post": {
        "summary": "Create Release",
        "description": "Create a new release for a decision function with legal references and change documentation",
        "operationId": "createRelease",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Decision function identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Release created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "release": {
                      "$ref": "#/components/schemas/Release"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or missing legal references",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registry/{function_id}/releases/{version}/sign": {
      "post": {
        "summary": "Sign Release",
        "description": "Sign a release with owner or reviewer signature for activation",
        "operationId": "signRelease",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "signer_id",
                  "role"
                ],
                "properties": {
                  "signer_id": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "reviewer"
                    ]
                  },
                  "signature": {
                    "type": "string",
                    "description": "KMS-backed signature"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Release signed successfully"
          },
          "400": {
            "description": "Invalid signature or role"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Comprehensive health check including database connectivity, service status, and governance features",
        "operationId": "healthCheck",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "System healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "System unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token with RS256 signature from trusted issuer"
      },
      "mTLS": {
        "type": "mutualTLS",
        "description": "Mutual TLS with certificate pinning"
      }
    },
    "schemas": {
      "ExecutionRequest": {
        "type": "object",
        "required": [
          "function_id",
          "version",
          "input_data",
          "nonce"
        ],
        "properties": {
          "function_id": {
            "type": "string",
            "description": "Decision function identifier"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "Function version"
          },
          "input_data": {
            "type": "object",
            "description": "Input data for the decision function"
          },
          "nonce": {
            "type": "string",
            "description": "Request nonce for replay protection"
          },
          "request_id": {
            "type": "string",
            "description": "External request identifier"
          },
          "correlation_id": {
            "type": "string",
            "description": "Correlation ID for distributed tracing"
          }
        }
      },
      "ExecutionResponse": {
        "type": "object",
        "required": [
          "trace_id",
          "status",
          "output_data"
        ],
        "properties": {
          "trace_id": {
            "type": "string",
            "format": "uuid",
            "description": "Trace ID for this execution"
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "description": "Execution status"
          },
          "output_data": {
            "type": "object",
            "description": "Decision function output"
          },
          "execution_time_ms": {
            "type": "number",
            "description": "Execution time in milliseconds"
          },
          "legal_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalReference"
            },
            "description": "Legal references used in this decision"
          },
          "explanation_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to get explanation for this decision"
          }
        }
      },
      "ExplanationResponse": {
        "type": "object",
        "required": [
          "trace_id",
          "decision",
          "legal_basis"
        ],
        "properties": {
          "trace_id": {
            "type": "string",
            "format": "uuid"
          },
          "decision": {
            "type": "string",
            "description": "Human-readable decision explanation"
          },
          "legal_basis": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Legal references (redacted if sensitive)"
          },
          "decision_path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Decision reasoning steps"
          },
          "confidence_score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Confidence score for the decision"
          },
          "redacted_fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fields that were redacted"
          }
        }
      },
      "AuditReport": {
        "type": "object",
        "required": [
          "report_id",
          "generated_at",
          "summary"
        ],
        "properties": {
          "report_id": {
            "type": "string",
            "format": "uuid"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time"
          },
          "summary": {
            "type": "object",
            "properties": {
              "total_traces": {
                "type": "integer"
              },
              "integrity_failures": {
                "type": "integer"
              },
              "drift_detected": {
                "type": "integer"
              },
              "chain_breaks": {
                "type": "integer"
              }
            }
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResult"
            }
          }
        }
      },
      "AuditResult": {
        "type": "object",
        "required": [
          "check_type",
          "status",
          "message"
        ],
        "properties": {
          "check_type": {
            "type": "string",
            "enum": [
              "hash_verification",
              "chain_integrity",
              "drift_detection"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "passed",
              "failed",
              "warning"
            ]
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      },
      "ReleaseRequest": {
        "type": "object",
        "required": [
          "version",
          "legal_references",
          "change_summary"
        ],
        "properties": {
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$"
          },
          "legal_references": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/LegalReference"
            }
          },
          "change_summary": {
            "type": "string"
          },
          "risk_assessment": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "compliance_checklist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "release_notes": {
            "type": "string"
          }
        }
      },
      "Release": {
        "type": "object",
        "required": [
          "function_id",
          "version",
          "status"
        ],
        "properties": {
          "function_id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "approved",
              "active"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "signer_id": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                },
                "signed_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "LegalReference": {
        "type": "object",
        "required": [
          "iri",
          "title"
        ],
        "properties": {
          "iri": {
            "type": "string",
            "format": "uri",
            "description": "Validated IRI (Finlex/EUR-Lex)"
          },
          "title": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "subsection": {
            "type": "string"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "degraded",
              "unhealthy"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "services": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string"
              },
              "trace_ledger": {
                "type": "string"
              },
              "audit_service": {
                "type": "string"
              },
              "legal_refs": {
                "type": "string"
              }
            }
          },
          "version": {
            "type": "string"
          },
          "uptime_seconds": {
            "type": "number"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "string",
            "description": "Additional error details"
          },
          "trace_id": {
            "type": "string",
            "format": "uuid",
            "description": "Trace ID for error tracking"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Execution",
      "description": "Decision function execution endpoints"
    },
    {
      "name": "Explanation",
      "description": "Decision explanation and transparency endpoints"
    },
    {
      "name": "Audit",
      "description": "Audit and compliance verification endpoints"
    },
    {
      "name": "Registry",
      "description": "Decision function registry and release management"
    },
    {
      "name": "System",
      "description": "System health and monitoring endpoints"
    }
  ]
}
